local H_POPUP = hash("popup")
local H_DEACTIVATE = hash("deactivate")

local node_popup_body = nil
local node_popup_fade = nil

local data_item = {}
local owner_url = nil
local buttons = {}
local is_lock_input = true

local function show_popup()
	is_lock_input = false
	gui.set_enabled(node_popup_fade, true)
	gui.set_enabled(node_popup_body, true)

	gui.set_color(node_popup_fade, vmath.vector4(0, 0, 0, 0))
	gui.animate(
	node_popup_fade,
	gui.PROP_COLOR,
	vmath.vector4(0, 0, 0, 0.5),
	gui.EASING_OUTSINE,
	0.1)

	gui.set_position(node_popup_body, vmath.vector3(450,300,0))
	gui.set_color(node_popup_body, vmath.vector4(1, 1, 1, 0))
	gui.animate(
	node_popup_body,
	gui.PROP_COLOR,
	vmath.vector4(1, 1, 1, 1),
	gui.EASING_OUTSINE,
	0.1)

	gui.set_scale(node_popup_body, vmath.vector3(0.8, 0.8, 0.8))
	gui.animate(
	node_popup_body,
	gui.PROP_SCALE,
	vmath.vector3(1, 1, 1),
	gui.EASING_OUTBACK,
	0.25)


end

local function hide_popup()
	is_lock_input = true

	gui.set_color(node_popup_fade, vmath.vector4(0, 0, 0, 0.5))
	gui.animate(
	node_popup_fade,
	gui.PROP_COLOR,
	vmath.vector4(0, 0, 0, 0),
	gui.EASING_INSINE,
	0.1)

	gui.set_color(node_popup_body, vmath.vector4(1, 1, 1, 1))
	gui.animate(
	node_popup_body,
	gui.PROP_COLOR,
	vmath.vector4(1, 1, 1, 0),
	gui.EASING_INSINE,
	0.1)

	gui.set_scale(node_popup_body, vmath.vector3(1, 1, 1))
	gui.animate(
	node_popup_body,
	gui.PROP_SCALE,
	vmath.vector3(0.6, 0.6, 0.6),
	gui.EASING_INSINE,
	0.25,
	0,
	function()
		if (owner_url) then
			msg.post(owner_url, "unlock_input")
		end
	end)

end

local function cancel_handler()
	hide_popup()
	
end

function init(self)
	msg.post(".", "acquire_input_focus")

	gui.set_render_order(3)

	node_popup_body = gui.get_node("body")
	node_popup_fade = gui.get_node("fade")
	

	gui.set_enabled(node_popup_body, false)
	gui.set_enabled(node_popup_fade, false)
	
end

function final(self)

end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if (message_id == H_POPUP) then
		owner_url = message.owner_url

		show_popup()

	elseif (message_id == H_DEACTIVATE) then
		gui.set_enabled(node_popup_body, false)
		gui.set_enabled(node_popup_fade, false)

	end
end

local node_state = {}

local function button_click(self, action, node_name, callback)
	-- node_name = node_name.."/button"
	local node = gui.get_node(node_name)

	if gui.pick_node(node, action.x, action.y) and gui.is_enabled(node) then
		if action.pressed then
			node_state[node_name] = 'pressed'
			gui.set_scale(node, vmath.vector3(1, 1, 1))
			gui.animate(node, gui.PROP_SCALE, vmath.vector3(0.9, 0.9, 0.9), gui.EASING_LINEAR, 0.1, 0)
		elseif action.released then
			node_state[node_name] = 'released'
			gui.animate(node, gui.PROP_SCALE, vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.1)
			callback(self)
		end
	elseif node_state[node_name] == 'pressed' then
		node_state[node_name] = nil
		gui.animate(node, gui.PROP_SCALE, vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.1)
	end
end

local buttons = {
	btn_close 		= cancel_handler
}

function on_input(self, action_id, action)
	if (not is_lock_input) then

		if action_id == hash('touch') then
			for button, callback in pairs(buttons) do
				button_click(self, action, button, callback)
			end
		end
		
		if (action.pressed and not gui.pick_node(node_popup_body, action.x, action.y)) then
			cancel_handler()
		end
	end
end